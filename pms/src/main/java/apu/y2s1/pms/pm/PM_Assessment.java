/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package apu.y2s1.pms.pm;

import apu.y2s1.pms.DataAbstract;
import com.toedter.calendar.JDateChooser;
import java.awt.Component;
import java.awt.Container;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import javax.swing.JComboBox;
import javax.swing.JTextField;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author Jeslyn
 */
public class PM_Assessment extends javax.swing.JFrame {
    DataAbstract table = new DataAbstract("Assessments.txt");
    DataAbstract combobox = new DataAbstract("Lecturers.txt");

    
    /**
     * Creates new form PM_Project
     */
    public PM_Assessment() {
        initComponents();
        ID.setEditable(false);
        ID.setFocusable(false);
        LoadData();
        Table();
    }
    
    private void LoadData() {
        for (int i = 1; i <= 10; i++) {
            String[] row = combobox.getRow(i);
            if (row != null && row.length > 1) {
                Supervisor.addItem(row[1]);
                FirstM.addItem(row[1]);
                SecondM.addItem(row[1]);
            }
        }
    }
    
    private void Table() {
        DefaultTableModel model = (DefaultTableModel) AssessmentTable.getModel();
        model.setRowCount(0);
        
        List<String[]> allRows = table.getAllRows();
        
        if (!allRows.isEmpty()) {

            for (int i = 0; i < allRows.size(); i++) {
                model.addRow(allRows.get(i));
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        AssessmentTable = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        Home = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        Name = new javax.swing.JTextField();
        Type = new javax.swing.JComboBox<>();
        Supervisor = new javax.swing.JComboBox<>();
        FirstM = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        SecondM = new javax.swing.JComboBox<>();
        Create = new javax.swing.JButton();
        Edit = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        ID = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        HandOut = new com.toedter.calendar.JDateChooser();
        Duedate = new com.toedter.calendar.JDateChooser();
        Clear = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        Search = new javax.swing.JTextField();
        Delete = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        AssessmentTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Name", "Type", "Supervisor", "First.M", "Second.M", "Hand Out.D", "Submission.D"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        AssessmentTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                AssessmentTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(AssessmentTable);
        if (AssessmentTable.getColumnModel().getColumnCount() > 0) {
            AssessmentTable.getColumnModel().getColumn(0).setResizable(false);
            AssessmentTable.getColumnModel().getColumn(3).setResizable(false);
            AssessmentTable.getColumnModel().getColumn(4).setResizable(false);
            AssessmentTable.getColumnModel().getColumn(5).setResizable(false);
            AssessmentTable.getColumnModel().getColumn(6).setResizable(false);
            AssessmentTable.getColumnModel().getColumn(7).setResizable(false);
        }

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 80, 650, 520));

        jLabel3.setFont(new java.awt.Font("Segoe Print", 1, 12)); // NOI18N
        jLabel3.setText("Assessment Name:");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 190, -1, -1));

        jLabel4.setFont(new java.awt.Font("Segoe Print", 1, 12)); // NOI18N
        jLabel4.setText("Assessment Type:");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 230, -1, -1));

        Home.setBackground(new java.awt.Color(255, 190, 152));
        Home.setFont(new java.awt.Font("Georgia", 2, 14)); // NOI18N
        Home.setText("HOME");
        Home.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HomeActionPerformed(evt);
            }
        });
        getContentPane().add(Home, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, 40));

        jLabel1.setBackground(new java.awt.Color(255, 190, 152));
        jLabel1.setFont(new java.awt.Font("Georgia", 1, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("ASSESSMENT MANAGEMENT");
        jLabel1.setOpaque(true);
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1030, 40));

        jLabel5.setFont(new java.awt.Font("Segoe Print", 1, 12)); // NOI18N
        jLabel5.setText("Supervisor:");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 270, -1, -1));

        jLabel6.setFont(new java.awt.Font("Segoe Print", 1, 12)); // NOI18N
        jLabel6.setText("First Marker:");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 310, -1, -1));
        getContentPane().add(Name, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 190, 130, -1));

        Type.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Internship", "Investigation Report", "CP1", "CP2", "RMCP", "FYP" }));
        getContentPane().add(Type, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 230, 130, -1));

        getContentPane().add(Supervisor, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 270, 130, -1));

        getContentPane().add(FirstM, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 310, 130, -1));

        jLabel7.setFont(new java.awt.Font("Segoe Print", 1, 12)); // NOI18N
        jLabel7.setText("Second Marker:");
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 350, -1, -1));

        getContentPane().add(SecondM, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 350, 130, -1));

        Create.setFont(new java.awt.Font("Segoe Print", 1, 10)); // NOI18N
        Create.setText("CREATE");
        Create.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreateActionPerformed(evt);
            }
        });
        getContentPane().add(Create, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 500, -1, -1));

        Edit.setFont(new java.awt.Font("Segoe Print", 1, 10)); // NOI18N
        Edit.setText("EDIT");
        Edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditActionPerformed(evt);
            }
        });
        getContentPane().add(Edit, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 500, -1, -1));

        jLabel8.setFont(new java.awt.Font("Segoe Print", 1, 12)); // NOI18N
        jLabel8.setText("Assessment ID:");
        getContentPane().add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 150, -1, -1));
        getContentPane().add(ID, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 150, 130, -1));

        jLabel2.setFont(new java.awt.Font("Segoe Print", 1, 12)); // NOI18N
        jLabel2.setText("Hand Out Date:");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 390, -1, -1));

        jLabel10.setFont(new java.awt.Font("Segoe Print", 1, 12)); // NOI18N
        jLabel10.setText("Due Date:");
        getContentPane().add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 430, -1, -1));

        HandOut.setDateFormatString("dd/MM/yyyy");
        getContentPane().add(HandOut, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 390, 170, -1));

        Duedate.setDateFormatString("dd/MM/yyyy");
        getContentPane().add(Duedate, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 430, 170, -1));

        Clear.setFont(new java.awt.Font("Segoe Print", 1, 10)); // NOI18N
        Clear.setText("CLEAR");
        Clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearActionPerformed(evt);
            }
        });
        getContentPane().add(Clear, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 550, -1, -1));

        jLabel11.setFont(new java.awt.Font("Segoe Print", 1, 12)); // NOI18N
        jLabel11.setText("Search ID:");
        getContentPane().add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 110, -1, -1));

        Search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchActionPerformed(evt);
            }
        });
        getContentPane().add(Search, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 110, 130, -1));

        Delete.setFont(new java.awt.Font("Segoe Print", 1, 10)); // NOI18N
        Delete.setText("DELETE");
        Delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteActionPerformed(evt);
            }
        });
        getContentPane().add(Delete, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 550, -1, -1));

        jLabel9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/apu/y2s1/pms/pm/img/Functionpage.png"))); // NOI18N
        getContentPane().add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1030, 650));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void CreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CreateActionPerformed
        String name = Name.getText();
        String type = Type.getSelectedItem().toString();
        String supervisor = Supervisor.getSelectedItem().toString();
        String fmarker = FirstM.getSelectedItem().toString();
        String smarker = SecondM.getSelectedItem().toString();
        String id = AssessmentID();
        
        if (NameDuplicate(name)) {
            javax.swing.JOptionPane.showMessageDialog(null, "This name already exists.");
            return;
        }
        
        if (!ValidateLecturers(supervisor, fmarker, smarker)) {
            return;
        }
        
        SimpleDateFormat format = new SimpleDateFormat("dd/MM/yyyy");
    
        Date outDate = HandOut.getDate();
        String outD = (outDate != null) ? format.format(outDate) : "";

        Date dueDate = Duedate.getDate();
        String due = (dueDate != null) ? format.format(dueDate) : "";
        
        if (!ValidateDates(outDate, dueDate)) {
            return;
        }
        
        String[] newData = {id, name, type, supervisor, fmarker, smarker, outD, due};
        
        if (table.writeTo(newData)) {
            Table();
        } else {
            javax.swing.JOptionPane.showMessageDialog(null,"An error occured while writing to file.");
        }
    }//GEN-LAST:event_CreateActionPerformed

    private void AssessmentTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AssessmentTableMouseClicked
        DefaultTableModel model = (DefaultTableModel) AssessmentTable.getModel();
        int row = AssessmentTable.getSelectedRow();
        
        ID.setText(model.getValueAt(row, 0).toString());
        Name.setText(model.getValueAt(row,1).toString());
        Type.setSelectedItem(model.getValueAt(row, 2).toString());
        Supervisor.setSelectedItem(model.getValueAt(row, 3).toString());
        FirstM.setSelectedItem(model.getValueAt(row, 4).toString());
        SecondM.setSelectedItem(model.getValueAt(row,5).toString());
        
        String handOutDS = model.getValueAt(row, 6).toString();
        String duedateDS = model.getValueAt(row, 7).toString();
        SimpleDateFormat format = new SimpleDateFormat("dd/MM/yyyy");
        
        try {
            Date handOutDate = format.parse(handOutDS);
            HandOut.setDate(handOutDate);
        } catch (ParseException e) {
            e.printStackTrace();
            HandOut.setDate(null);
        }
        
        try {
            Date dueDate = format.parse(duedateDS);
            Duedate.setDate(dueDate);
        } catch (ParseException e) {
            e.printStackTrace();
            Duedate.setDate(null);
        }
    }//GEN-LAST:event_AssessmentTableMouseClicked

    private void EditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditActionPerformed
        int selected = AssessmentTable.getSelectedRow();
        
        if (selected != -1) {           
            String id = ID.getText();
            String name = Name.getText();
            String type = Type.getSelectedItem().toString();
            String supervisor = Supervisor.getSelectedItem().toString();
            String fmarker = FirstM.getSelectedItem().toString();
            String smarker = SecondM.getSelectedItem().toString();
            
            if (NameDuplicate(name)) {
                javax.swing.JOptionPane.showMessageDialog(null, "This name already exists.");
                return;
            }
            
            if (!ValidateLecturers(supervisor, fmarker, smarker)) {
                return;
            }
            
            SimpleDateFormat simple = new SimpleDateFormat("dd/MM/yyyy");
    
            Date outDate = HandOut.getDate();
            String outD = (outDate != null) ? simple.format(outDate) : "";

            Date dueDate = Duedate.getDate();
            String due = (dueDate != null) ? simple.format(dueDate) : "";
            
            if (!ValidateDates(outDate, dueDate)) {
                return;
            }
            
            String[] update = {id, name, type, supervisor, fmarker, smarker, outD, due};
            
            if (table.updateRow(selected, update)) {
                Table();
            } else {
                javax.swing.JOptionPane.showMessageDialog(null, "An error occured while updating data.");
            }
        } else {
            javax.swing.JOptionPane.showMessageDialog(null, "An error occured while updating data.");
        }
    }//GEN-LAST:event_EditActionPerformed

    private void HomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HomeActionPerformed
        PM_FunctionPage home = new PM_FunctionPage();
        home.setVisible(true);
        dispose();
    }//GEN-LAST:event_HomeActionPerformed

    private void ClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearActionPerformed
        ClearTextFields(ID);
        ClearTextFields(Name);
        ClearTextFields(Type);
        ClearTextFields(Supervisor);
        ClearTextFields(FirstM);
        ClearTextFields(SecondM);
        ClearTextFields(HandOut);
        ClearTextFields(Duedate);
    }//GEN-LAST:event_ClearActionPerformed

    private void SearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchActionPerformed
        DefaultTableModel table = (DefaultTableModel) AssessmentTable.getModel();
        TableRowSorter<DefaultTableModel> search = new TableRowSorter<>(table);
        AssessmentTable.setRowSorter(search);
        String field = Search.getText().toLowerCase();
        search.setRowFilter(RowFilter.regexFilter("(?i)" + field,0));
    }//GEN-LAST:event_SearchActionPerformed

    private void DeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteActionPerformed
        int selectedRow = AssessmentTable.getSelectedRow();
        
        if (selectedRow != -1) {
            //String idToDelete = AssessmentTable.getValueAt(selectedRow, 0).toString();
            if (table.deleteRow(selectedRow)) {
            javax.swing.JOptionPane.showMessageDialog(null, "Row deleted successfully.");
            Table();
            } else {
            javax.swing.JOptionPane.showMessageDialog(null, "An error occurred while deleting the row.");
            }
        } else {
            javax.swing.JOptionPane.showMessageDialog(null, "Please select a row to delete.");
        }
    }//GEN-LAST:event_DeleteActionPerformed

    private void ClearTextFields(Component component) {
        if (component instanceof JTextField) {
            JTextField textField = (JTextField) component;
            textField.setText("");
        } else if (component instanceof JComboBox) {
            JComboBox<?> comboBox = (JComboBox<?>) component;
            if (comboBox.getItemCount() > 0) {
                comboBox.setSelectedIndex(0);
            }
        } else if (component instanceof JDateChooser) {
            JDateChooser dateChooser = (JDateChooser) component;
            dateChooser.setDate(null);
        } else if (component instanceof Container) {
            Component[] subComponents = ((Container) component).getComponents();
            for (Component subComponent : subComponents) {
                ClearTextFields(subComponent);
            }
        }
    }
    
    private String AssessmentID() {
        String id;
        boolean isUnique;

        do {
            id = "A" + String.format("%05d", (int)(Math.random() * 100000));
            isUnique = true;

            List<String[]> allRows = table.getAllRows();
            System.out.println("all row"+allRows);
            for (String[] row : allRows) {
                if (row[0].equals(id)) {
                    isUnique = false;
                    break;
                }
            }
        } while (!isUnique);

        return id;
    }
    
    private boolean NameDuplicate(String name) {
        DefaultTableModel model = (DefaultTableModel) AssessmentTable.getModel();
        for (int i = 0; i < model.getRowCount(); i++) {
            String existingName = model.getValueAt(i, 1).toString();
            if (existingName.equals(name)) {
                return true; 
            }
        }
        return false; 
    }
    
    private boolean ValidateDates(Date outDate, Date dueDate) {
        if (dueDate.before(outDate)) {
            javax.swing.JOptionPane.showMessageDialog(null, "Due date cannot be earlier than hand out date.");
            return false;
        }

        long timeFrameMillis = dueDate.getTime() - outDate.getTime();
        long halfYearMillis = 1000L * 60 * 60 * 24 * 365 / 2;
        if (timeFrameMillis > halfYearMillis) {
            javax.swing.JOptionPane.showMessageDialog(null, "Time frame between submission date and due date cannot be more than half a year.");
            return false;
        }

        return true;
    }
    
    private boolean ValidateLecturers(String supervisor, String fmarker, String smarker) {
        if (supervisor.equals(fmarker) || supervisor.equals(smarker) || fmarker.equals(smarker)) {
            javax.swing.JOptionPane.showMessageDialog(null, "Supervisor, first marker, and second marker cannot be the same person.");
            return false;
        }
        return true;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PM_Assessment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PM_Assessment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PM_Assessment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PM_Assessment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PM_Assessment().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable AssessmentTable;
    private javax.swing.JButton Clear;
    private javax.swing.JButton Create;
    private javax.swing.JButton Delete;
    private com.toedter.calendar.JDateChooser Duedate;
    private javax.swing.JButton Edit;
    private javax.swing.JComboBox<String> FirstM;
    private com.toedter.calendar.JDateChooser HandOut;
    private javax.swing.JButton Home;
    private javax.swing.JTextField ID;
    private javax.swing.JTextField Name;
    private javax.swing.JTextField Search;
    private javax.swing.JComboBox<String> SecondM;
    private javax.swing.JComboBox<String> Supervisor;
    private javax.swing.JComboBox<String> Type;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
